variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -DscreenRecorder.url=http://127.0.0.1:8000 -Dappium.log.level=error -Dserenity.take.screenshots=AFTER_EACH_STEP"
  SCRIPTS_REPO: https://$SCRIPTS_USER:$SCRIPTS_TOKEN@gitlab.com/vertafore/agency/sdet/ci-scripts.git
  MAX_TRIES: 1

default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - stuck_or_timeout_failure
  interruptible: true

.windows scripts:
  tags: [Windows]
  before_script:
    - Write-Host $CI_RUNNER_TAGS
    - if (Test-Path ./scripts) { Remove-Item ./scripts -Recurse -Force }
    - mkdir scripts
    - git clone "$SCRIPTS_REPO" "./scripts"
    - Get-ChildItem ./scripts -Filter "*.psm1" | ForEach { Import-Module $_.FullName }

.regression:
  parallel: 10
  extends: .windows scripts
  script:
    - Expand-Outlines
    - Set-ReportPortalProperties -Project MAR -Try $Env:TRY
    - Invoke-RegressionQueue
      -Command "./gradlew test --tests TestSupport -Denvironment=$ENVIRONMENT -DignoreFailures=true"
      -Project MAR
      -Try $Env:TRY
      -BatchSize 0
  after_script:
    - aws storagegateway refresh-cache --file-share-arn arn:aws:storagegateway:us-east-1:065073025992:share/share-99B425F3
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_ID == null && $SMOKE_TEST == null && $SCENARIO_TAG == null
  interruptible: false
  when: always
  allow_failure: true

.rerun_regression:
  parallel: 5
  extends: .windows scripts
  script:
    - Expand-Outlines
    - Set-ReportPortalProperties -Project MAR -Try $Env:TRY
    - Invoke-RegressionQueue
      -Command "./gradlew test --tests TestSupport -Denvironment=$ENVIRONMENT -DignoreFailures=true"
      -Project MAR
      -Pipeline $PIPELINE_ID
      -Try 1
      -BatchSize 0
  after_script:
    - aws storagegateway refresh-cache --file-share-arn arn:aws:storagegateway:us-east-1:065073025992:share/share-99B425F3
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_ID != null && $SMOKE_TEST == null && $SCENARIO_TAG == null
  interruptible: false
  when: always
  allow_failure: true


.scenario_tag_test_run:
  parallel: 5
  extends: .windows scripts
  script:
    - Expand-Outlines
    - Set-ReportPortalProperties -Project MAR -Try $Env:TRY
    - Invoke-ScenarioTagQueue
      -Command "./gradlew test --tests TestSupport -Denvironment=$ENVIRONMENT -DignoreFailures=true"
      -Project MAR
      -ScenarioTag $SCENARIO_TAG
      -Try 1
  after_script:
    - aws storagegateway refresh-cache --file-share-arn arn:aws:storagegateway:us-east-1:065073025992:share/share-99B425F3
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $PIPELINE_ID == null && $SMOKE_TEST == null && $SCENARIO_TAG != null
  interruptible: false
  when: always
  allow_failure: true



.merge launches:
  extends: .windows scripts
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $SMOKE_TEST == null
  variables:
    GIT_STRATEGY: none
  dependencies: []
  interruptible: false

stages:
  - project checks
  - test
  - regression
  - merge regression
  - report

spotless:
  stage: project checks
  image: openjdk:14-jdk-slim
  script:
    - ./gradlew spotlessJavaCheck
    - ./gradlew compileTestJava
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.java"
        - "**/*.conf"

scenarios:
  stage: project checks
  image: mcr.microsoft.com/powershell
  before_script:
    - apt-get update && apt-get install -y git
    - mkdir scripts
    - git clone "$SCRIPTS_REPO" "./scripts"
  script:
    - |
      pwsh -C "
      Install-Module powershell-yaml -Force;
      Import-Module ./scripts/TestScenarios.psm1;
      Test-SyncTags;
      Test-DuplicateScenarioNames;"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.feature"

dry run:
  stage: project checks
  image: openjdk:14-jdk-slim
  script:
    - ./gradlew test --tests TestSupport -Dcucumber.execution.dry-run=true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*StepDefinitions.java"
        - "**/*.feature"
  cache:
    paths:
      - build/

#Run TCs from branch on merge request three times
.run_tc_from_branch:
  parallel: 3
  allow_failure: true
  extends: .windows scripts
  script:
    - $TestCases = Format-TestCases -String ($CI_COMMIT_REF_NAME + $CI_MERGE_REQUEST_TITLE) -Delimiter "-"
    - ./gradlew clean test --tests TestSupport "-Denvironment=$Environment" "-Dcucumber.filter.tags=$TestCases";
  after_script:
    - New-Item reports -ItemType Directory -Force
    - Get-ChildItem $Env:HOMEPATH\Downloads -File | Move-Item -Destination .\reports
  artifacts:
    paths:
      - reports/
    expire_in: 2 days
    when: always
  dependencies: []

QA:
  extends: .run_tc_from_branch
  stage: test
  variables:
    ENVIRONMENT: QA
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /TC-?[0-9]+/i && $CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_MERGE_REQUEST_TITLE =~ /TC-?[0-9]+/i && $CI_PIPELINE_SOURCE == "merge_request_event"'
  artifacts:
    expose_as: Reports

first attempt:
  extends: .regression
  stage: regression
  variables:
    TRY: 1

rerun attempt:
  extends: .rerun_regression
  stage: regression
  variables:
    TRY: 1

scenario tag attempt:
  extends: .scenario_tag_test_run
  stage: regression
  variables:
    TRY: 1

first merge:
  extends: .merge launches
  stage: merge regression
  script:
    - $LAUNCH_VAR = $LAUNCH_NAME
    - If ($SCENARIO_TAG) { $LAUNCH_VAR = "ScenarioTag - ${LAUNCH_VAR}" }  
    - Write-Host $LAUNCH_VAR
    - Merge-Launches -Project MAR -Name "$LAUNCH_VAR" -Description "GitLab CI - Merged - First Try" -Try 1

report:
  stage: report
  extends: .windows scripts
  script:
    - cd scripts
    - npm install
    - python SendResults_MAR.py mar 1
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")  && $SCENARIO_TAG == null
  retry: 2
  dependencies: []